import random

def fitness(x, y):
    return abs(x**2 - x * y + y**2 - x - y)

def genetic_algorithm():
    population_size = 100
    generations = 50
    mutation_rate = 0.2

    population = [(random.randint(-10, 10), random.randint(-10, 10)) for _ in range(population_size)]

    for generation in range(generations):
        fitness_values = [(individual, fitness(individual[0], individual[1])) for individual in population]
        fitness_values.sort(key=lambda x: x[1])  # Сортування за мінімальним значенням функції (мінімізація)

        selected_individuals = [individual for individual, value in fitness_values[:population_size // 2]]

        next_generation = []
        while len(next_generation) < population_size:
            parent1 = random.choice(selected_individuals)
            parent2 = random.choice(selected_individuals)
            child1 = ((parent1[0] + parent2[0]) // 2, (parent1[1] + parent2[1]) // 2)
            next_generation.append(child1)

        #мутант
        for i in range(len(next_generation)):
            if random.random() < mutation_rate:
                next_generation[i] = (next_generation[i][0] + random.randint(-1, 1), next_generation[i][1] + random.randint(-1, 1))

        #обновлення популяції
        population = next_generation

    #кращий результ
    best_individual = min(population, key=lambda x: fitness(x[0], x[1]))
    return best_individual, fitness(best_individual[0], best_individual[1])

best_solution, best_value = genetic_algorithm()
print(f"знайдене рішення: x = {best_solution[0]}, y = {best_solution[1]}")
if best_value == 0:
    print("рішення задовольняє рівнянню.")
else:
    print("наближене рішення, яке не точно задовольняє рівнянню.")
