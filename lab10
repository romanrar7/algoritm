import heapq
from collections import Counter, namedtuple

class Node(namedtuple("Node", ["char", "freq"])):
    def __lt__(self, other):
        return self.freq < other.freq

def build_huffman_tree(text):
    frequency = Counter(text)
    heap = [Node(char, freq) for char, freq in frequency.items()]
    heapq.heapify(heap)

    while len(heap) > 1:
        left = heapq.heappop(heap)
        right = heapq.heappop(heap)
        merged = Node(None, left.freq + right.freq)
        heapq.heappush(heap, merged)

    return heap[0]

def gencod(node, prefix="", codebook={}):
    if node.char is not None:
        codebook[node.char] = prefix
    else:
        if isinstance(node, Node):
            gencod(heapq.heappop(node), prefix + "0", codebook)
            gencod(heapq.heappop(node), prefix + "1", codebook)
    return codebook

def huffmanencod(text):
    tree = build_huffman_tree(text)
    codebook = gencod(tree)
    encoded_text = "".join(codebook[char] for char in text)
    return encoded_text, codebook

def huffmandecod(encoded_text, codebook):
    reverse_codebook = {v: k for k, v in codebook.items()}
    decoded_text = ""
    buffer = ""
    for bit in encoded_text:
        buffer += bit
        if buffer in reverse_codebook:
            decoded_text += reverse_codebook[buffer]
            buffer = ""
    return decoded_text

def main():
    text = "трирядне слово з вибраного варіанту"
    print(f"оригінальний текст: {text}")

    encoded_text, codebook = huffmanencod(text)
    print(f"закодований текст: {encoded_text}")
    print(f"кодування символів: {codebook}")

    decoded_text = huffmandecod(encoded_text, codebook)
    print(f"розкодований текст: {decoded_text}")

if __name__ == '__main__':
    main()
