import heapq
import random

#АлгоритмДейкстри
def dijkstra(graph, start):
    distances = {node: float('inf') for node in graph}
    distances[start] = 0
    priority_queue = [(0, start)]

    while priority_queue:
        current_distance, current_node = heapq.heappop(priority_queue)

        if current_distance > distances[current_node]:
            continue

        for neighbor, weight in graph[current_node]:
            distance = current_distance + weight

            if distance < distances[neighbor]:
                distances[neighbor] = distance
                heapq.heappush(priority_queue, (distance, neighbor))

    return distances

graph = {
    1: [(2, 8), (3, 7), (4, 3), (5, 6)],
    2: [(6, 3), (7, 4)],
    3: [(6, 1), (7, 5)],
    4: [(7, 5), (8, 2)],
    5: [(7, 5), (8, 5)],
    6: [(9, 3), (10, 4)],
    7: [(9, 6), (10, 7), (11, 7), (12, 4)],
    8: [(11, 4), (12, 4)],
    9: [(13, 9), (14, 7)],
    10: [(13, 8), (14, 9)],
    11: [(14, 8), (15, 9)],
    12: [(14, 8), (15, 9)],
    13: [(16, 4)],
    14: [(16, 5)],
    15: [(16, 7)],
    16: []
}

#алгоритм Дейкстри вершина 1
min_distances = dijkstra(graph, 1)
print("мінімальні відстані від вершини 1 до інших вершин:", min_distances)
print(f"мінімальний шлях до вершини 16: {min_distances[16]}")

#заповнюємо випадковими числами
hash_table = {i: random.randint(1, 100) for i in range(1, 21)}
print("\nПочаткова хеш-таблиця:", hash_table)

#удаляєм лишнє
hash_table = {key: value for key, value in hash_table.items() if value % 2 != 0}

print("\nхеш-таблиця після видалення парних чисел:", hash_table)
print("\nелементи, що залишились у хеш-таблиці:", hash_table)
